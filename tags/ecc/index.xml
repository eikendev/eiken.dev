<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ecc on eikendev</title><link>https://www.eiken.dev/tags/ecc/</link><description>Recent content in Ecc on eikendev</description><generator>Hugo</generator><language>en-us</language><managingEditor>hello@eiken.dev (eikendev)</managingEditor><webMaster>hello@eiken.dev (eikendev)</webMaster><lastBuildDate>Sat, 13 Feb 2021 00:31:44 +0100</lastBuildDate><atom:link href="https://www.eiken.dev/tags/ecc/index.xml" rel="self" type="application/rss+xml"/><item><title>Code Spotlight: the Reference Implementation of Ed25519 (Part 1)</title><link>https://www.eiken.dev/blog/2020/11/code-spotlight-the-reference-implementation-of-ed25519-part-1/</link><pubDate>Sun, 22 Nov 2020 19:00:00 +0000</pubDate><author>hello@eiken.dev (eikendev)</author><guid>https://www.eiken.dev/blog/2020/11/code-spotlight-the-reference-implementation-of-ed25519-part-1/</guid><description>&lt;p>Elliptic curve cryptography (ECC) has always been something I wanted to fully understand eventually.
A recent project I worked on has brought me one step closer, but also revealed to me the true complexity of the topic.
I am now convinced that I will probably never fully understand the maths behind ECC.&lt;/p>
&lt;p>However, I discovered something else that I find interesting, although it&amp;rsquo;s not necessarily easier: implementing given schemes.
In this post, I want to take you on a journey to explore a state-of-the-art implementation of a cryptographic scheme.&lt;/p></description></item></channel></rss>